# -*- coding: utf-8 -*-
"""More False Shots, More Risks, More Rewards

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yAx69OG1wMgGH8R3kXMlVuP4RzBSvTPV
"""

from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')

import pandas as pd

file_path = '/content/drive/My Drive/modelpred.csv'
df = pd.read_csv(file_path)

df.head()

df = pd.read_csv(file_path)
df['date'] = pd.to_datetime(df['date'])
#to check till what date we have ball by ball data of
last_date = df['date'].max()

print(f"The last date in the 'date' column is: {last_date}")

#using three variables we will predict the expected runs, we will group them in a way that for each unique combination of these three variables we will take the mean of batruns scored, so that if any time the same unique combination of these contextual variables occur we can predtict the expected runs -  Ensure necessary columns are in the correct datatype
df['inns_rr'] = pd.to_numeric(df['inns_rr'], errors='coerce')
df['inns_balls_rem'] = pd.to_numeric(df['inns_balls_rem'], errors='coerce')
df['inns_wkts'] = pd.to_numeric(df['inns_wkts'], errors='coerce')
df['batruns'] = pd.to_numeric(df['batruns'], errors='coerce')

# Group by the unique combinations of 'inns_rr', 'inns_balls_rem', and 'inns_wkts'
grouped = df.groupby(['inns_rr', 'inns_balls_rem', 'inns_wkts'])['batruns'].mean().reset_index()

# Rename the 'batruns' column to 'XRuns' in the grouped DataFrame
grouped.rename(columns={'batruns': 'XRuns'}, inplace=True)

# Merge the grouped DataFrame back into the original DataFrame
df = df.merge(grouped, on=['inns_rr', 'inns_balls_rem', 'inns_wkts'], how='left')

# Display the first few rows of the updated DataFrame
print(df.head())

# Save the updated DataFrame back to CSV
new_file_path = '/content/drive/My Drive/t20_bbb_with_XRuns.csv'
df.to_csv(new_file_path, index=False)

print("The DataFrame with the 'XRuns' column has been successfully saved to:", new_file_path)

# File path
file_path = '/content/drive/My Drive/t20_bbb_with_XRuns.csv'

# Load the CSV file
df = pd.read_csv(file_path)

# Ensure the 'date' column is in datetime format
df['date'] = pd.to_datetime(df['date'])

# Filter for Suryakumar Yadav
suryakumar_df = df[df['bat'] == 'Suryakumar Yadav']

# Filter for the years 2023 and 2024
suryakumar_recent = suryakumar_df[(suryakumar_df['date'].dt.year == 2023) | (suryakumar_df['date'].dt.year == 2024)]

# Calculate the total sum of XRuns
total_XRuns = suryakumar_recent['XRuns'].sum()

print(f"Total XRuns for Suryakumar Yadav in 2023 and 2024: {total_XRuns}")

# File path
file_path = '/content/drive/My Drive/t20_bbb_with_XRuns.csv'

# Load the CSV file
df = pd.read_csv(file_path)

# Ensure necessary columns are in the correct datatype
df['inns_rr'] = pd.to_numeric(df['inns_rr'], errors='coerce')
df['inns_balls_rem'] = pd.to_numeric(df['inns_balls_rem'], errors='coerce')
df['inns_wkts'] = pd.to_numeric(df['inns_wkts'], errors='coerce')
df['bowlruns'] = pd.to_numeric(df['bowlruns'], errors='coerce')

# Group by the unique combinations of 'inns_rr', 'inns_balls_rem', and 'inns_wkts'
grouped = df.groupby(['inns_rr', 'inns_balls_rem', 'inns_wkts'])['bowlruns'].mean().reset_index()

# Rename the 'batruns' column to 'XRunsb' in the grouped DataFrame
grouped.rename(columns={'bowlruns': 'XRunsb'}, inplace=True)

# Merge the grouped DataFrame back into the original DataFrame
df = df.merge(grouped, on=['inns_rr', 'inns_balls_rem', 'inns_wkts'], how='left')

# Display the first few rows of the updated DataFrame
print(df.head())

# Save the updated DataFrame back to CSV
new_file_path = '/content/drive/My Drive/t20_bbb_with_XRunsb.csv'
df.to_csv(new_file_path, index=False)

print("The DataFrame with the 'XRunsb' column has been successfully saved to:", new_file_path)

# Calculate the RAAR (batruns - XRuns)
df['RAAR'] = df['batruns'] - df['XRuns']

# Assuming you have an 'XRunsb' column for expected bowling runs
# Calculate the RBAR (bowlruns - XRunsb)
df['RBAR'] = df['bowlruns'] - df['XRuns']  # Using 'XRuns' since 'XRunsb' isn't explicitly created

# Display the first few rows of the updated DataFrame
print(df.head())

# Save the updated DataFrame back to CSV
new_file_path = '/content/drive/My Drive/t20_bbb_with_XRuns_RAAR_RBAR.csv'
df.to_csv(new_file_path, index=False)

print("The DataFrame with 'RAAR' and 'RBAR' columns has been successfully saved to:", new_file_path)

"""#Calculating Top Prolific Battes Who Have Defied The Average Replacement Of Batters

"""

df['batruns'] = pd.to_numeric(df['batruns'], errors='coerce')
df['XRuns'] = pd.to_numeric(df['XRuns'], errors='coerce')
df['RAAR'] = pd.to_numeric(df['RAAR'], errors='coerce')


grouped_bat = df.groupby('bat').agg(
    total_batruns=('batruns', 'sum'),
    total_XRuns=('XRuns', 'sum'),
    total_RAAR=('RAAR', 'sum'),
    first_date=('date', 'min'),
    last_date=('date', 'max'),
    team_bat_entries=('team_bat', lambda x: ', '.join(x.unique()))
).reset_index()

# Filter players with at least 5000 total batruns
filtered_bat = grouped_bat[grouped_bat['total_batruns'] >= 5000]

# Display the filtered table
print(filtered_bat)

import plotly.express as px

# Ensure 'control' and 'wide' columns are in numeric format
df['control'] = pd.to_numeric(df['control'], errors='coerce')
df['wide'] = pd.to_numeric(df['wide'], errors='coerce')

# Filter rows where 'wide' column is 0
df_filtered = df[df['wide'] == 0]

# Group by 'bat' and calculate total sum of 'control' where control is 0, and count rows
grouped_control = df_filtered.groupby('bat').agg(
    total_batruns=('batruns', 'sum'),
    total_XRuns=('XRuns', 'sum'),
    total_RAAR=('RAAR', 'sum'),
    total_control_0=('control', lambda x: (x == 0).sum()),  # Sum of control entries that are 0
    total_rows=('bat', 'count'),  # Count of total rows for each 'bat'
    first_date=('date', 'min'),
    last_date=('date', 'max'),
    team_bat_entries=('team_bat', lambda x: ', '.join(x.unique()))
).reset_index()

# Filter players with at least 5000 total batruns
filtered_control = grouped_control[grouped_control['total_batruns'] >= 5000]

# Display the filtered table
print(filtered_control)

# Save the filtered table to a new CSV
output_file_path_control = '/content/drive/My Drive/batsmen_with_5000_plus_control_and_rows.csv'
filtered_control.to_csv(output_file_path_control, index=False)

print("The table for batsmen with 5000+ runs and control calculations has been saved to:", output_file_path_control)

# Visualization using Plotly (Horizontal Bar Chart to show prolific batters based on RAAR)
fig = px.bar(filtered_control,
             x='total_RAAR',
             y='bat',
             text='total_RAAR',
             title="Top Batters by RAAR with Control Calculations",
             labels={"total_RAAR": "Total RAAR", "bat": "Batter"},
             orientation='h')

# Show plot
fig.show()

import plotly.graph_objects as go

# Create an interactive table using Plotly
fig_table = go.Figure(data=[go.Table(
    header=dict(values=list(filtered_control.columns),
                fill_color='paleturquoise',
                align='left'),
    cells=dict(values=[filtered_control[col] for col in filtered_control.columns],
               fill_color='lavender',
               align='left'))
])

# Update layout for better readability
fig_table.update_layout(
    title="Interactive Table for Batsmen with 5000+ Runs",
    height=600,  # You can adjust the height as needed
    width=1000,  # You can adjust the width as needed
)

# Show the table
fig_table.show()

# Visualization using Plotly (Vertical Bar Chart with bat on x-axis and RAAR on y-axis)
fig = px.bar(filtered_control,
             x='bat',  # Set bat column on the x-axis
             y='total_RAAR',  # Set RAAR on the y-axis
             text='total_RAAR',
             title="Top Batters by RAAR with Control Calculations",
             labels={"total_RAAR": "Total RAAR", "bat": "Batter"})

# Update layout to rotate x-axis tick labels for vertical display
fig.update_layout(
    xaxis_title="Batter",
    yaxis_title="Total RAAR",
    title_font_size=20,
    height=600,  # Adjust height as necessary
    xaxis_tickangle=-90  # Rotate x-axis labels to vertical
)

# Show the plot
fig.show()

import plotly.express as px


df['control'] = pd.to_numeric(df['control'], errors='coerce')
df['wide'] = pd.to_numeric(df['wide'], errors='coerce')


df_filtered = df[df['wide'] == 0]


grouped_false_shot = df_filtered.groupby('bat').agg(
    total_control_0=('control', lambda x: (x == 0).sum()),  # Count control = 0
    total_occurrences=('bat', 'count'),
    total_RAAR=('RAAR', 'sum')
).reset_index()

# Calculate False Shot Percentage
grouped_false_shot['false_shot_percentage'] = (grouped_false_shot['total_control_0'] / grouped_false_shot['total_occurrences']) * 100

# Scatter plot between False Shot Percentage and RAAR
fig = px.scatter(grouped_false_shot,
                 x='false_shot_percentage',
                 y='total_RAAR',
                 text='bat',
                 title="Scatter Plot: False Shot Percentage vs RAAR",
                 labels={"false_shot_percentage": "False Shot Percentage (%)", "total_RAAR": "Total RAAR"})

# Update layout for better readability
fig.update_layout(
    title_font_size=20,
    xaxis_title="False Shot Percentage (%)",
    yaxis_title="Total RAAR",
    height=600,  # Adjust as necessary
)

# Show plot
fig.show()

import plotly.express as px

# Ensure 'control' and 'wide' columns are in numeric format
df['control'] = pd.to_numeric(df['control'], errors='coerce')
df['wide'] = pd.to_numeric(df['wide'], errors='coerce')
df['batruns'] = pd.to_numeric(df['batruns'], errors='coerce')

# Filter rows where 'wide' column is 0
df_filtered = df[df['wide'] == 0]


grouped_bat = df_filtered.groupby('bat').agg(
    total_batruns=('batruns', 'sum'),
    total_control_0=('control', lambda x: (x == 0).sum()),  # Count control = 0
    total_occurrences=('bat', 'count'),  # Count total rows
    total_RAAR=('RAAR', 'sum')  # Sum of RAAR
).reset_index()


grouped_bat_filtered = grouped_bat[grouped_bat['total_batruns'] >= 5000]


grouped_bat_filtered['false_shot_percentage'] = (grouped_bat_filtered['total_control_0'] / grouped_bat_filtered['total_occurrences']) * 100

fig = px.scatter(grouped_bat_filtered,
                 x='false_shot_percentage',
                 y='total_RAAR',
                 text='bat',
                 title="Scatter Plot: False Shot Percentage vs RAAR for Batters with 5000+ Runs",
                 labels={"false_shot_percentage": "False Shot Percentage (%)", "total_RAAR": "Total RAAR"})


fig.update_layout(
    title_font_size=20,
    xaxis_title="False Shot Percentage (%)",
    yaxis_title="Total RAAR",
    height=600,
)

# Show plot
fig.show()